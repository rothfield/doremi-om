(def repl-env (reset! cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
exit
exot
exit
(cemerick.austin.repls/browser-connected-repl-js)
(cemerick.austin.repls/cljs-repl repl-env)
(def repl-env (reset! cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
exit
(def repl-env (reset! cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
(def repl-env (reset! cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
(cemerick.austin.repls/browser-connected-repl-js)
(def repl-env (reset! cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
(js/alert "Salut!")
(def repl-env (reset! cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env))
)
(defonce server (run-jetty #'handler {:port 8080 :join? false})
)
(def repl-env (reset! cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
exit
quit
(run)
(doremi-script/core/run)
(doremi_script.core/run)
(doremi-script.core/run)
(ns doremi-script.core)
(run)
(ns doremi-script.core)
(run)
exit
(doremi-script.core.run)
(doremi-script.core/run)
(doremi_script.core/run)
(ns doremi_script.core)
(run)
comments
(use doremi_script.core)
quit
(ns doremi.core)
(run)
(in-ns doremi.core)
quit
(use doremi.core)
(use 'doremi.core)
quit
(use 'doremi.core)
quit
(use 'doremi.core)
quit
(use 'doremi.core)
quit
(use 'doremi.core)
quit
(use 'doremi.core)
(run)
(def repl-env (reset! cemerick.austin.repls/browser-repl-env (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
(js/alert "Salut!")
(use 'doremi.core)
(run)
(def repl-env (reset! cemerick.austin.repls/browser-repl-env (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
(js/alert "Salut!")
(hello)
(in-ns doremi-script)
(in-ns 'doremi-script)
(hello)
hello
(in-ns 'doremi-script/app)
hello
(hello)
(doremi-script.app/hello)
(ns doremi-script.app)
(hello)
exit
(run)
(ns doremi.app)
(run)
(doremi.app/run)
(doremi.core/run)
exit
(ns doremi.core)
(run)
(ns 'doremi.core)
(ns doremi.core)
(run)
(ns doremi.core)
(run)
(ns doremi.core)
(run)
(ns 'doremi.core)
(run)
(in-ns 'doremi.core)
(run)
(doremi.core/run
)
(ns doremi.core)
(server)
(doremi.core/run)
exit
(doremi.core/run)
(ns doremi.core)
(run)
(app)
run
(ns doremi.core)
(run)
(in-ns 'doremi.core)
(run)
(ns 'doremi.core)
(use doremi.core)
(use 'doremi.core)
(run)
(use doremi.core)
run
(run)
quit
(ns doremi.core)
(run)
(ns 'doremi.core)
(ns doremi.core)
(run)
(use 'doremi.core :reload)
(ns doremi.core)
(run)
(def repl-env (reset! cemerick.austin.repls/browser-repl-env (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
(js/alert "Salut!")
exit
(def repl-env (reset! cemerick.austin.repls/browser-repl-env (cemerick.austin/repl-env)))
(use 'doremi.core :reload)
(doremi.core/run)
(use 'doremi.core :reload)
(doremi.core/run)
(use 'doremi.core :reload)
(run)
exit
(use 'doremi.core :reload)
(run)
exit
(run)
exit
(doremi.core/run)
(use 'doremi.core :reload)
js-repl
(js-repl)
doremi.app
quit
(run)
(js-repl)
(js/alert "Salut!")
exit
(run) (js-repl) 
(js/alert "Salut!")
exit
(run) (js-repl) 
(js-repl)
(js/alert "Salut!")
exit
(js-repl)
(js/alert "Salut!")
exit
(js-repl)
(js/alert "hi")
(take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))
(take 100 (for [x (range 10) y (range 10)] [x y]))
(size [])
(length [])
(count [])
(def x [[1 1] [2 2])
(def x [[1 1] [2 2]])
(update-in x [0 0] 3)
(assoc-in x [0 0] 3)
(get-in x [0 0] 3)
x
(get-in x [0 0])
(get-in x [1 1])
(def grid [[0 0 0 0] [1 1 1 0] [0 1 1 0] [0 0 0 0]])
grid
(get-in grid [0 0])
(def neighbors '([0 0] [0 1] [0 2] [1 0] [1 2] [2 0] [2 1] [2 2]))
neighbors
(get-in grid [2 2])
(get-in grid [2 1])
(get-in grid [2 0])
(map #(get-in grid %) neighbors-list)
(def neighbors-list '([0 0] [0 1] [0 2] [1 0] [1 2] [2 0] [2 1] [2 2]))
(map #(get-in grid %) neighbors-list)
(pprint grid)
(map println grid)
exit
(concat [1] [2] [3])
(repeat 4 20)
(repeat (repeat 0 50) 20)
(repeat 0 50)
(repeat 50 0)
(def base  [ [ 0 0 0 0 0]
   [  0 0 1 1 0]
   [  0 1 1 0 0]
   [  0 0 1 0 0]
   [  0 0 0 0 0]
   ]   
)
base
(def width 100)
width
(def blank-line (repeat 100 0))
blank-line
(def blanks-before (repeat 40 blank-line))
blanks-before
(pprint blanks-before)
blanks-before
(count blanks-before)
(repeat (- 100 (+ 40 (count base))))
(repeat (- 100 (+ 40 (count base))) blank-line)
pad
(def g '((0 0 0 0 0 0 0 0 0 0) (0 0 1 1 0 0 0 0 0 0) (0 1 1 0 0 0 0 0 0 0) (0 0 1 0 0 0
0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0
0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))
g
(get-in g [0 1])
(floor (/ 15 2))
(trunc (/ 15 2))
(truncate (/ 15 2))
(% 15 2)
(round (/ 15 2))
(integer (/ 15 2))
(int (/ 15 2)
)
(reload!)
reload
exit
(life-test (pad r-pentamino 20) 500)
(live-the-game-of-life (pad r-pentamino 20) 500)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 20) 500)
(live-the-game-of-life (pad r-pentamino 500) 1500)
(live-the-game-of-life (pad r-pentamino 20) 1500)
r-pantamino
(pprint r-pantamino)
(println r-pantamino)
(clojure.core/require 'doremi.core :reload)
r-pentamino
(pprint r-pentamino)
(map println r-pentamino)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 600) 1500)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 100) 20)
exit
"\u25ao"
"\u25A0"
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 100) 20)
(live-the-game-of-life (pad r-pentamino 100) 5)
(live-the-game-of-life (pad r-pentamino 30) 5)
exit
(colors)
(render "hi")
(doc render)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 5)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 5)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 5)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 5)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 5)
(clojure.core/require 'doremi.core :reload)
exit
(live-the-game-of-life (pad r-pentamino 30) 5)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 5)
(live-the-game-of-life (pad r-pentamino 30) 5 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 5 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 5 nil)
(live-the-game-of-life (pad r-pentamino 30) 100 nil)
(live-the-game-of-life (pad r-pentamino 30) 1000 nil)
(live-the-game-of-life (pad r-pentamino 300) 1000 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 300) 1000 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 300) 1000 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 300) 1000 nil)
(live-the-game-of-life (pad r-pentamino 120) 1000 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 120) 1000 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 120) 1000 nil)
(live-the-game-of-life (pad r-pentamino 50) 1200 nil)
(def s #{})
(s 1)
(def s #{2})
(s 2)
(s 1)
(put s 2)
(assoc s 2)
(conj s 2)
s
(conj s 4)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 50) 1200 nil)
(live-the-game-of-life (pad r-pentamino 100) 1200 nil)
(= #{1} #{1})
(= #{[1 2 3]} #{[1 2 3]})
(= #{(conj 5 [1 2 3])} #{(conj 5 [1 2 3])})
(= #{(conj  [1 2 3] 4)} #{(conj  [1 2 3] 4)})
(live-the-game-of-life (pad [[0 0 ][1 1]] 100) 1200 nil)
(live-the-game-of-life (pad [[0 0 ][1 1]] 20) 1200 nil)
(live-the-game-of-life (pad blinker 20) 1200 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad blinker 20) 1200 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad blinker 20) 1200 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad blinker 20) 1200 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad blinker 20) 1200 nil)
(live-the-game-of-life (pad blinker 7) 1200 nil)
(live-the-game-of-life (pad blinker 5) 1200 nil)
(live-the-game-of-life (pad r-pentamino 5) 1200 nil)
(live-the-game-of-life (pad r-pentamino 40) 1200 nil)
(live-the-game-of-life (pad r-pentamino 80) 1200 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 80) 1200 nil)
(live-the-game-of-life (pad r-pentamino 200) 1200 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 200) 1200 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 200) 1200 nil)
(def z (int-array [0 1 0]))
z
(pprint z)
(def z (int-array [[1 1 1] [0 1 0]]))
r-pentamino
(def z (map int-array r-pentamino))
z
(pprint z)
(def y int-array (map int-array r-pentamino))
(def y (int-array (map int-array r-pentamino)))
(def y (vec (map int-array r-pentamino)))
(pprint y)
(aget-int (get y 0) 2)
(aget (get y 0) 2)
(aget (get y 2) 2)
(aset (get y 2) 9)
(aset (get y 2) 2 9)
(pprint y)
(hash "122")
(hash y)
(aset (get y 2) 2 9)
(hash y)
(aset (get y 2) 2 8)
(hash y)
(= y (aset (get y 2) 2 11))
(= y (aset (get y 2) 2 8))
(pprint y)
(pprint (aset (get y 2) 2 8))
 (aset (get y 2) 2 8))
 (aset 
)
 (aset (get y 2) 2 8)
(int-array (map int-array r-pentamino))
(array (map int-array r-pentamino))
(vec (map int-array r-pentamino))
(def zz (vec (map int-array r-pentamino)))
(pprint zz)
(aget zz 0)
(def zz (object-array (map int-array r-pentamino)))
(pprint zz)
(count zz)
(class zz)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 200) 3 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 200) 3 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 200) 3 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 200) 3 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 200) 3 nil)
(pad r-pentamino 200)
(live-the-game-of-life (pad r-pentamino 200) 3 nil)
(live-the-game-of-life (pad r-pentamino 6) 3 nil)
zz
(pprint zz)
(map str (map str zz))
(apply str (apply str zz))
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 6) 3 nil)
(live-the-game-of-life (pad r-pentamino 30) 3 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 3 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 3 nil)
  
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 3 nil)
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 3 nil)
(set! *warn-on-reflection* true) 
(clojure.core/require 'doremi.core :reload)
(live-the-game-of-life (pad r-pentamino 30) 3 nil)
(live-the-game-of-life (pad r-pentamino 70) 200 nil)
(def v ["one" "two" "three" "two"])
(.indexOf v "two")
(first (filter #(= % "one") v))
(first (positions #(= % "one") v))
(first (keep-indexed #(= % "one") v))
(keep-indexed #(= % "one") v)
(keep-indexed #(if (= %1 "one") %2) v)
v
(keep-indexed #(if (= %2 "one") %1) v)
(keep-indexed #(if (= %2 "three") %1) v)
(first (keep-indexed #(if (= %2 "three") %1) v))
